require('dotenv').config();

const express = require('express');
const cors = require('cors');
const multer = require('multer');
const xlsx = require('xlsx');
const fs = require('fs-extra');
const path = require('path');
const moment = require('moment');
const FormData = require('form-data');
const fetch = require('node-fetch');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.static('.'));
app.use(express.json());

const UPLOAD_DIR = path.join(__dirname, 'uploads');
if (!fs.existsSync(UPLOAD_DIR)) {
  fs.mkdirSync(UPLOAD_DIR, { recursive: true });
}

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, UPLOAD_DIR);
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname);
  }
});
const upload = multer({ storage });

// === –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê –í KAITEN ===
async function uploadFileToKaiten(filePath, fileName, cardId) {
  try {
    const stats = fs.statSync(filePath);
    if (stats.size === 0) {
      console.error("–§–∞–π–ª –ø—É—Å—Ç–æ–π:", fileName);
      return false;
    }

    const form = new FormData();
    form.append('file', fs.createReadStream(filePath), {
      filename: fileName,
      knownLength: stats.size
    });

    const response = await fetch(`https://panna.kaiten.ru/api/latest/cards/${cardId}/files`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.KAITEN_API_TOKEN}`,
        'Accept': 'application/json'
      },
      body: form
    });

    if (response.ok) {
      console.log(`‚úÖ –§–∞–π–ª "${fileName}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–∞—Ä—Ç–æ—á–∫—É ${cardId}`);
      return true;
    } else {
      const errorText = await response.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ "${fileName}": ${response.status} - ${errorText}`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ "${fileName}":`, error.message);
    return false;
  }
}

// === –ù–ê–î–ï–ñ–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø EXCEL –î–ê–¢–´ ===
function excelDateToJSDate(serial) {
  if (serial == null || serial === '') return null;
  if (serial instanceof Date) return serial;

  // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –¥–∞—Ç—É
  if (typeof serial === 'string') {
    const parsed = parseFloat(serial);
    if (!isNaN(parsed)) {
      serial = parsed;
    } else {
      const date = new Date(serial);
      if (!isNaN(date.getTime())) return date;
      return null;
    }
  }

  // –ï—Å–ª–∏ —á–∏—Å–ª–æ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ Excel serial date
  if (typeof serial === 'number') {
    const excelEpochWithError = new Date(1899, 11, 30); // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è Excel bug
    const utcDays = Math.floor(serial - 1);
    const milliseconds = utcDays * 24 * 60 * 60 * 1000;
    return new Date(excelEpochWithError.getTime() + milliseconds);
  }

  return null;
}

// === –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê ===
function generateReport(dfGrid, dfArchive, monthName, year) {
  try {
    console.log("=== –ù–ê–ß–ê–õ–û –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –û–¢–ß–ï–¢–ê ===");
    console.log(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –º–µ—Å—è—Ü=${monthName}, –≥–æ–¥=${year}`);

    // === 1. –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –ì–†–ò–î–ê –ò –ê–†–•–ò–í–ê ===
    const allData = [...(dfGrid.data || []), ...(dfArchive.data || [])];
    console.log(`–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${allData.length} (–ì—Ä–∏–¥: ${dfGrid.data?.length || 0}, –ê—Ä—Ö–∏–≤: ${dfArchive.data?.length || 0})`);

    // === 2. –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –î–ê–¢ –ò –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–´–• ===
    function excelDateToJSDate(serial) {
      if (serial == null || serial === '') return null;
      if (serial instanceof Date) return serial;
      if (typeof serial === 'string') {
        const parsed = parseFloat(serial);
        if (!isNaN(parsed)) serial = parsed;
        else {
          const d = new Date(serial);
          return isNaN(d.getTime()) ? null : d;
        }
      }
      if (typeof serial === 'number') {
        const excelEpochWithError = new Date(1899, 11, 30);
        const utcDays = Math.floor(serial - 1);
        const ms = utcDays * 24 * 60 * 60 * 1000;
        return new Date(excelEpochWithError.getTime() + ms);
      }
      return null;
    }

    const processedData = allData.map(row => {
      row['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] = excelDateToJSDate(row['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è']);
      row['–í—ã–ø–æ–ª–Ω–µ–Ω–∞'] = excelDateToJSDate(row['–í—ã–ø–æ–ª–Ω–µ–Ω–∞']);
      if (!row['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'] || row['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'].toString().trim() === '') {
        row['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'] = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      }
      return row;
    });

    // === 3. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–ï–†–ò–û–î–ê ===
    const monthObj = moment(monthName, 'MMMM', true);
    if (!monthObj.isValid()) throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü");
    const monthNum = monthObj.month() + 1;
    const monthPeriod = `${year}-${monthNum.toString().padStart(2, '0')}`;
    console.log(`–§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É: ${monthPeriod}`);

    // === 4. –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–´–• ===
    const textAuthors = ['–ù–∞—Ç–∞–ª–∏—è –ü—è—Ç–Ω–∏—Ü–∫–∞—è', '–í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –ö—É–ª—è–±–∏–Ω–∞', '–ü—è—Ç–Ω–∏—Ü–∫–∞—è', '–ö—É–ª—è–±–∏–Ω–∞'];
    const isTextAuthor = (row) => textAuthors.includes(row['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']);
    const isDesigner = (row) => !isTextAuthor(row) && row['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'] !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const isUnknown = (row) => row['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'] === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    // === 5. –ü–û–î–°–ß–Å–¢ –°–û–ó–î–ê–ù–ù–´–• –ò –í–´–ü–û–õ–ù–ï–ù–ù–´–• –ó–ê–î–ê–ß ===
    const createdDesign = [];
    const completedDesign = [];
    const createdText = [];
    const completedText = [];
    const createdUnknown = [];
    const completedUnknown = [];

    for (const row of processedData) {
      // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
      const created = row['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'];
      if (created && moment(created).isValid()) {
        if (moment(created).format('YYYY-MM') === monthPeriod) {
          if (isDesigner(row)) createdDesign.push(row);
          else if (isTextAuthor(row)) createdText.push(row);
          else if (isUnknown(row)) createdUnknown.push(row);
        }
      }

      // –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const completed = row['–í—ã–ø–æ–ª–Ω–µ–Ω–∞'];
      if (completed && moment(completed).isValid()) {
        if (moment(completed).format('YYYY-MM') === monthPeriod) {
          if (isDesigner(row)) completedDesign.push(row);
          else if (isTextAuthor(row)) completedText.push(row);
          else if (isUnknown(row)) completedUnknown.push(row);
        }
      }
    }

    console.log("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
    console.log(`–î–∏–∑–∞–π–Ω–µ—Ä—ã ‚Äî —Å–æ–∑–¥–∞–Ω–æ: ${createdDesign.length}, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedDesign.length}`);
    console.log(`–¢–µ–∫—Å—Ç–æ–≤—ã–µ ‚Äî —Å–æ–∑–¥–∞–Ω–æ: ${createdText.length}, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedText.length}`);
    console.log(`–ë–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ ‚Äî —Å–æ–∑–¥–∞–Ω–æ: ${createdUnknown.length}, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedUnknown.length}`);

    // === 6. –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –û–¢–ß–Å–¢–ê –ü–û –í–´–ü–û–õ–ù–ï–ù–ù–´–ú ===
    const allCompleted = [...completedDesign, ...completedUnknown];
    let report = [];

    if (allCompleted.length > 0) {
      const reportMap = {};
      for (const row of allCompleted) {
        const resp = row['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        if (!reportMap[resp]) {
          reportMap[resp] = { –ó–∞–¥–∞—á–∏: 0, –ú–∞–∫–µ—Ç—ã: 0, –í–∞—Ä–∏–∞–Ω—Ç—ã: 0, –û—Ü–µ–Ω–∫–∞: 0, count: 0 };
        }
        reportMap[resp].–ó–∞–¥–∞—á–∏ += 1;
        reportMap[resp].–ú–∞–∫–µ—Ç—ã += parseInt(row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫–µ—Ç–æ–≤']) || 0;
        reportMap[resp].–í–∞—Ä–∏–∞–Ω—Ç—ã += parseInt(row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤']) || 0;
        if (row['–û—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç—ã']) {
          const score = parseFloat(row['–û—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç—ã']);
          if (!isNaN(score)) {
            reportMap[resp].–û—Ü–µ–Ω–∫–∞ += score;
            reportMap[resp].count += 1;
          }
        }
      }

      report = Object.keys(reportMap).map(resp => ({
        –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: resp,
        –ó–∞–¥–∞—á–∏: reportMap[resp].–ó–∞–¥–∞—á–∏,
        –ú–∞–∫–µ—Ç—ã: reportMap[resp].–ú–∞–∫–µ—Ç—ã,
        –í–∞—Ä–∏–∞–Ω—Ç—ã: reportMap[resp].–í–∞—Ä–∏–∞–Ω—Ç—ã,
        –û—Ü–µ–Ω–∫–∞: reportMap[resp].count > 0 ? (reportMap[resp].–û—Ü–µ–Ω–∫–∞ / reportMap[resp].count).toFixed(2) : 0
      }));
    }

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    if (report.length > 0) {
      const totalRow = {
        –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: '–ò–¢–û–ì–û',
        –ó–∞–¥–∞—á–∏: report.reduce((sum, r) => sum + r.–ó–∞–¥–∞—á–∏, 0),
        –ú–∞–∫–µ—Ç—ã: report.reduce((sum, r) => sum + r.–ú–∞–∫–µ—Ç—ã, 0),
        –í–∞—Ä–∏–∞–Ω—Ç—ã: report.reduce((sum, r) => sum + r.–í–∞—Ä–∏–∞–Ω—Ç—ã, 0),
        –û—Ü–µ–Ω–∫–∞: report.length > 0 ? (report.reduce((sum, r) => sum + parseFloat(r.–û—Ü–µ–Ω–∫–∞), 0) / report.length).toFixed(2) : 0
      };
      report.push(totalRow);
    }

    // === 7. –¢–ï–ö–°–¢–û–í–´–ô –û–¢–ß–Å–¢ ===
    const textReport = `–û–¢–ß–ï–¢ –ó–ê ${monthName.toUpperCase()} ${year} –ì–û–î–ê

–î–∏–∑–∞–π–Ω–µ—Ä—ã:
- –ü–æ—Å—Ç—É–ø–∏–ª–æ –∑–∞–¥–∞—á: ${createdDesign.length}
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${completedDesign.length}

–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏:
- –ü–æ—Å—Ç—É–ø–∏–ª–æ: ${createdText.length}
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedText.length}

–ó–∞–¥–∞—á–∏ –±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ:
- –ü–æ—Å—Ç—É–ø–∏–ª–æ: ${createdUnknown.length}
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedUnknown.length}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–´–ü–û–õ–ù–ï–ù–ù–´–ú –ó–ê–î–ê–ß–ê–ú –î–ò–ó–ê–ô–ù–ï–†–û–í –ò –ó–ê–î–ê–ß–ê–ú –ë–ï–ó –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–ì–û:
(—Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤ –æ—Ç—á–µ—Ç–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ)`;

    console.log("\n‚úÖ –û–¢–ß–ï–¢ –£–°–ü–ï–®–ù–û –°–§–û–†–ú–ò–†–û–í–ê–ù");
    return { report, textReport };

  } catch (error) {
    console.error("‚ùå –û–®–ò–ë–ö–ê –í generateReport:", error.message);
    throw error;
  }
}

// === –ú–ê–†–®–†–£–¢–´ ===

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/report', (req, res) => {
  res.sendFile(path.join(__dirname, 'report.html'));
});

app.post('/api/upload', upload.fields([
  { name: 'grid', maxCount: 1 },
  { name: 'archive', maxCount: 1 }
]), async (req, res) => {
  try {
    const { month, year } = req.body;

    if (!req.files.grid || !req.files.archive) {
      return res.status(400).json({ error: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞' });
    }

    const gridPath = req.files.grid[0].path;
    const archivePath = req.files.archive[0].path;

    const gridWorkbook = xlsx.readFile(gridPath);
    const archiveWorkbook = xlsx.readFile(archivePath);

    const gridSheet = gridWorkbook.Sheets[gridWorkbook.SheetNames[0]];
    const archiveSheet = archiveWorkbook.Sheets[archiveWorkbook.SheetNames[0]];

    if (!gridSheet || !archiveSheet) {
      throw new Error('–û–¥–∏–Ω –∏–∑ –ª–∏—Å—Ç–æ–≤ Excel –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const allGridRows = xlsx.utils.sheet_to_json(gridSheet, { header: 1, defval: null });
    const allArchiveRows = xlsx.utils.sheet_to_json(archiveSheet, { header: 1, defval: null });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ì—Ä–∏–¥"
    let gridColumns = [];
    let gridData = [];

    if (allGridRows.length > 0) {
      let headerRowIndex = 0;
      for (let i = 0; i < allGridRows.length; i++) {
        const row = allGridRows[i];
        if (Array.isArray(row) && row.length > 0 && typeof row[0] === 'string' && row[0].trim() !== '') {
          if (row.some(cell => typeof cell === 'string' && cell.includes('–ù–∞–∑–≤–∞–Ω–∏–µ'))) {
            headerRowIndex = i;
            break;
          }
        }
      }
      gridColumns = allGridRows[headerRowIndex];
      if (allGridRows.length > headerRowIndex + 1) {
        gridData = allGridRows.slice(headerRowIndex + 1).map(row => {
          const obj = {};
          gridColumns.forEach((col, i) => {
            if (col && typeof col === 'string') {
              obj[col.trim()] = row[i];
            }
          });
          return obj;
        }).filter(row => Object.keys(row).length > 0);
      }
    }

    const dfGrid = { columns: gridColumns, data: gridData || [] };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ê—Ä—Ö–∏–≤" ‚Äî –ò–°–ü–†–ê–í–õ–ï–ù–û!
    let archiveColumns = [];
    let archiveData = [];

    if (allArchiveRows.length > 0) {
      let headerRowIndex = 0;
      for (let i = 0; i < allArchiveRows.length; i++) {
        const row = allArchiveRows[i]; // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ allGridRows[i]
        if (Array.isArray(row) && row.length > 0 && typeof row[0] === 'string' && row[0].trim() !== '') {
          if (row.some(cell => typeof cell === 'string' && cell.includes('–ù–∞–∑–≤–∞–Ω–∏–µ'))) {
            headerRowIndex = i;
            break;
          }
        }
      }

      archiveColumns = allArchiveRows[headerRowIndex];
      if (allArchiveRows.length > headerRowIndex + 1) {
        archiveData = allArchiveRows.slice(headerRowIndex + 1).map(row => {
          const obj = {};
          archiveColumns.forEach((col, i) => {
            if (col && typeof col === 'string') {
              obj[col.trim()] = row[i];
            }
          });
          return obj;
        }).filter(row => Object.keys(row).length > 0);
      }
    }

    const dfArchive = { columns: archiveColumns, data: archiveData || [] };

    console.log("–ê—Ä—Ö–∏–≤: –∫–æ–ª–æ–Ω–∫–∏ =", dfArchive.columns);
    console.log("–ê—Ä—Ö–∏–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ =", (dfArchive.data || []).length);
    console.log("–ì—Ä–∏–¥: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ =", (dfGrid.data || []).length);

    const { report, textReport } = generateReport(
      dfGrid,
      dfArchive,
      month,
      parseInt(year)
    );

    const tempDir = path.join(UPLOAD_DIR, `temp_${Date.now()}`);
    await fs.mkdir(tempDir);

    const ws = xlsx.utils.json_to_sheet(report);
    const wb = xlsx.utils.book_new();
    xlsx.utils.book_append_sheet(wb, ws, "–û—Ç—á—ë—Ç");
    const excelPath = path.join(tempDir, `–û—Ç—á–µ—Ç_${month}_${year}.xlsx`);
    xlsx.writeFile(wb, excelPath);

    const txtPath = path.join(tempDir, `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_${month}_${year}.txt`);
    await fs.writeFile(txtPath, textReport, 'utf8');

    const cardId = process.env.KAITEN_CARD_ID;
    if (cardId) {
      await uploadFileToKaiten(excelPath, `–û—Ç—á–µ—Ç_${month}_${year}.xlsx`, cardId);
      await uploadFileToKaiten(txtPath, `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_${month}_${year}.txt`, cardId);
    } else {
      console.warn("‚ö†Ô∏è KAITEN_CARD_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Kaiten");
    }

    await fs.unlink(gridPath);
    await fs.unlink(archivePath);
    await fs.remove(tempDir);

    res.json({
      success: true,
      textReport: textReport,
      report: report || []
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /api/upload:", error.message);
    res.status(500).json({ error: error.message });
  }
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
