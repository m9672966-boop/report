# app.py - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
import logging
import pandas as pd
from datetime import datetime
import tempfile
import os
import glob
import shutil
from flask import Flask, request, jsonify, send_file, render_template_string
from werkzeug.utils import secure_filename
from io import BytesIO
import uuid

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
MARKETPLACE_PATH = r"V:\Workspace\–†–ï–ö–õ–ê–ú–ù–´–ï –ú–ê–ö–ï–¢–´\–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size
app.config['UPLOAD_FOLDER'] = tempfile.mkdtemp()
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key')

# === HTML —à–∞–±–ª–æ–Ω –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ===
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è Kaiten</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
        }
        .upload-section {
            margin-bottom: 30px;
            padding: 20px;
            border: 2px dashed #ddd;
            border-radius: 8px;
            text-align: center;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #34495e;
        }
        select, input[type="number"] {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 6px;
            font-size: 16px;
            box-sizing: border-box;
        }
        select:focus, input[type="number"]:focus {
            border-color: #3498db;
            outline: none;
        }
        .btn {
            background: #3498db;
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            width: 100%;
            transition: background 0.3s;
        }
        .btn:hover {
            background: #2980b9;
        }
        .btn:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
        }
        .file-info {
            margin-top: 10px;
            padding: 10px;
            background: #ecf0f1;
            border-radius: 4px;
            font-size: 14px;
        }
        .success {
            color: #27ae60;
            font-weight: bold;
        }
        .error {
            color: #e74c3c;
            font-weight: bold;
        }
        .download-section {
            margin-top: 30px;
            padding: 20px;
            background: #ecf0f1;
            border-radius: 8px;
            text-align: center;
        }
        .download-btn {
            background: #27ae60;
            margin: 10px;
            padding: 12px 24px;
            display: inline-block;
        }
        .download-btn:hover {
            background: #229954;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üìä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤</h1>
        
        <div class="upload-section">
            <h3>üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤</h3>
            
            <div class="form-group">
                <label for="grid_file">–§–∞–π–ª –ì—Ä–∏–¥ (XLSX):</label>
                <input type="file" id="grid_file" accept=".xlsx" onchange="handleFileSelect('grid')">
                <div id="grid_info" class="file-info"></div>
            </div>
            
            <div class="form-group">
                <label for="archive_file">–§–∞–π–ª –ê—Ä—Ö–∏–≤ (XLSX):</label>
                <input type="file" id="archive_file" accept=".xlsx" onchange="handleFileSelect('archive')">
                <div id="archive_info" class="file-info"></div>
            </div>
        </div>

        <div class="form-group">
            <label for="month">–ú–µ—Å—è—Ü:</label>
            <select id="month">
                <option value="1">–Ø–Ω–≤–∞—Ä—å</option>
                <option value="2">–§–µ–≤—Ä–∞–ª—å</option>
                <option value="3">–ú–∞—Ä—Ç</option>
                <option value="4">–ê–ø—Ä–µ–ª—å</option>
                <option value="5">–ú–∞–π</option>
                <option value="6">–ò—é–Ω—å</option>
                <option value="7">–ò—é–ª—å</option>
                <option value="8">–ê–≤–≥—É—Å—Ç</option>
                <option value="9">–°–µ–Ω—Ç—è–±—Ä—å</option>
                <option value="10">–û–∫—Ç—è–±—Ä—å</option>
                <option value="11">–ù–æ—è–±—Ä—å</option>
                <option value="12">–î–µ–∫–∞–±—Ä—å</option>
            </select>
        </div>

        <div class="form-group">
            <label for="year">–ì–æ–¥:</label>
            <input type="number" id="year" min="2020" max="2030" value="{{ current_year }}">
        </div>

        <button class="btn" onclick="generateReport()" id="generate_btn">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç</button>

        <div id="result_section" class="download-section" style="display: none;">
            <h3>üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h3>
            <div id="text_report"></div>
            <div>
                <button class="btn download-btn" onclick="downloadFile('excel')">üìä –°–∫–∞—á–∞—Ç—å Excel –æ—Ç—á–µ—Ç</button>
                <button class="btn download-btn" onclick="downloadFile('text')">üìù –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç</button>
                <button class="btn download-btn" onclick="downloadFile('merged')">üîÑ –°–∫–∞—á–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª</button>
            </div>
        </div>
    </div>

    <script>
        let sessionId = null;
        let files = { grid: null, archive: null };

        function handleFileSelect(type) {
            const fileInput = document.getElementById(type + '_file');
            const fileInfo = document.getElementById(type + '_info');
            
            if (fileInput.files.length > 0) {
                const file = fileInput.files[0];
                files[type] = file;
                fileInfo.innerHTML = `<span class="success">‚úì ${file.name} (${formatFileSize(file.size)})</span>`;
            } else {
                files[type] = null;
                fileInfo.innerHTML = '<span class="error">‚úó –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω</span>';
            }
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        async function generateReport() {
            const btn = document.getElementById('generate_btn');
            const resultSection = document.getElementById('result_section');
            const textReport = document.getElementById('text_report');
            
            if (!files.grid || !files.archive) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞');
                return;
            }

            const month = document.getElementById('month').value;
            const year = document.getElementById('year').value;

            btn.disabled = true;
            btn.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...';

            const formData = new FormData();
            formData.append('grid_file', files.grid);
            formData.append('archive_file', files.archive);
            formData.append('month', month);
            formData.append('year', year);

            try {
                const response = await fetch('/generate_report', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();

                if (data.success) {
                    sessionId = data.session_id;
                    textReport.innerHTML = `<pre>${data.text_report}</pre>`;
                    resultSection.style.display = 'block';
                } else {
                    alert('–û—à–∏–±–∫–∞: ' + data.error);
                }
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: ' + error);
            } finally {
                btn.disabled = false;
                btn.textContent = '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç';
            }
        }

        function downloadFile(type) {
            if (!sessionId) {
                alert('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –æ—Ç—á–µ—Ç');
                return;
            }
            
            let filename = '';
            switch(type) {
                case 'excel':
                    filename = `–û—Ç—á–µ—Ç_${document.getElementById('month').options[document.getElementById('month').selectedIndex].text}_${document.getElementById('year').value}.xlsx`;
                    break;
                case 'text':
                    filename = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_${document.getElementById('month').options[document.getElementById('month').selectedIndex].text}_${document.getElementById('year').value}.txt`;
                    break;
                case 'merged':
                    filename = `–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π_—Ñ–∞–π–ª_${document.getElementById('month').options[document.getElementById('month').selectedIndex].text}_${document.getElementById('year').value}.xlsx`;
                    break;
            }
            
            window.open(`/download/${type}/${sessionId}?filename=${encodeURIComponent(filename)}`, '_blank');
        }
    </script>
</body>
</html>
"""

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def count_marketplace_cards(month_num, year):
    """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü"""
    try:
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º
        return 25
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤: {e}")
        return 0

def merge_grid_to_archive(df_grid, df_archive):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ì—Ä–∏–¥–∞ –≤ –ê—Ä—Ö–∏–≤, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏"""
    try:
        logger.info("=== –ù–ê–ß–ê–õ–û –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• ===")

        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        common_columns = list(set(df_grid.columns) & set(df_archive.columns))
        logger.info(f"–û–±—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {common_columns}")

        if not common_columns:
            logger.error("–ù–µ—Ç –æ–±—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è!")
            return df_archive

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DataFrame —Ç–æ–ª—å–∫–æ —Å –æ–±—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏–∑ –ì—Ä–∏–¥–∞
        df_grid_common = df_grid[common_columns].copy()

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ì—Ä–∏–¥–∞ –≤ –ê—Ä—Ö–∏–≤
        df_merged = pd.concat([df_archive, df_grid_common], ignore_index=True)
        logger.info(
            f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: –ì—Ä–∏–¥={len(df_grid_common)} —Å—Ç—Ä–æ–∫ + –ê—Ä—Ö–∏–≤={len(df_archive)} —Å—Ç—Ä–æ–∫ = –ò—Ç–æ–≥–æ={len(df_merged)} —Å—Ç—Ä–æ–∫")

        return df_merged

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def generate_report(df_grid, df_archive, month, year):
    try:
        logger.info("=== –ù–ê–ß–ê–õ–û –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –û–¢–ß–ï–¢–ê ===")
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –º–µ—Å—è—Ü={month}, –≥–æ–¥={year}")

        # === 1. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
        logger.info("\n1. –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –ì–†–ò–î–ê –ò –ê–†–•–ò–í–ê")
        df_merged = merge_grid_to_archive(df_grid, df_archive)

        # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º –Ω–∞ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π' in df_merged.columns:
            df_merged['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'] = df_merged['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'].fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        # === 2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç ===
        logger.info("\n2. –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –î–ê–¢:")
        date_columns = ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–í—ã–ø–æ–ª–Ω–µ–Ω–∞']
        for col in date_columns:
            if col in df_merged.columns:
                df_merged[col] = pd.to_datetime(df_merged[col], errors='coerce')
        
        logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –¥–∞—Ç: {len(df_merged)} —Å—Ç—Ä–æ–∫")

        # === 3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ ===
        logger.info("\n3. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ú–ï–°–Ø–¶–ê –û–¢–ß–ï–¢–ê:")
        month_num = int(month)
        month_names = {
            1: '–Ø–Ω–≤–∞—Ä—å', 2: '–§–µ–≤—Ä–∞–ª—å', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–µ–ª—å',
            5: '–ú–∞–π', 6: '–ò—é–Ω—å', 7: '–ò—é–ª—å', 8: '–ê–≤–≥—É—Å—Ç',
            9: '–°–µ–Ω—Ç—è–±—Ä—å', 10: '–û–∫—Ç—è–±—Ä—å', 11: '–ù–æ—è–±—Ä—å', 12: '–î–µ–∫–∞–±—Ä—å'
        }
        month_name = month_names.get(month_num, f"–ú–µ—Å—è—Ü {month_num}")
        logger.info(f"–ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞: {month_num} -> –Ω–∞–∑–≤–∞–Ω–∏–µ: {month_name}")

        month_str = f"{year}-{month_num:02d}"
        start_date = pd.Timestamp(f"{year}-{month_num:02d}-01")
        if month_num == 12:
            end_date = pd.Timestamp(f"{year+1}-01-01")
        else:
            end_date = pd.Timestamp(f"{year}-{month_num+1:02d}-01")

        logger.info(f"–ü–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: —Å {start_date} –ø–æ {end_date}")

        # === 4. –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
        logger.info("\n4. –ü–û–î–°–ß–ï–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò:")
        text_authors = ['–ù–∞—Ç–∞–ª–∏—è –ü—è—Ç–Ω–∏—Ü–∫–∞—è', '–í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –ö—É–ª—è–±–∏–Ω–∞', '–ü—è—Ç–Ω–∏—Ü–∫–∞—è', '–ö—É–ª—è–±–∏–Ω–∞']

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á
        if '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π' in df_merged.columns:
            is_text_author = df_merged['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'].isin(text_authors)
            is_designer = ~is_text_author
        else:
            is_text_author = pd.Series([False] * len(df_merged))
            is_designer = pd.Series([True] * len(df_merged))

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
        if '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è' in df_merged.columns:
            created_mask = (df_merged['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] >= start_date) & (df_merged['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] < end_date)
            created_design = df_merged[is_designer & created_mask]
            created_text = df_merged[is_text_author & created_mask]
        else:
            created_design = pd.DataFrame()
            created_text = pd.DataFrame()

        if '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' in df_merged.columns:
            completed_mask = (df_merged['–í—ã–ø–æ–ª–Ω–µ–Ω–∞'] >= start_date) & (df_merged['–í—ã–ø–æ–ª–Ω–µ–Ω–∞'] < end_date)
            completed_design = df_merged[is_designer & completed_mask]
            completed_text = df_merged[is_text_author & completed_mask]
        else:
            completed_design = pd.DataFrame()
            completed_text = pd.DataFrame()

        # === –ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á –±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ ===
        no_resp_mask = df_merged['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'].isna() if '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π' in df_merged.columns else pd.Series([False] * len(df_merged))

        # –ü–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        if '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è' in df_merged.columns:
            no_resp_created = df_merged[no_resp_mask & created_mask]
        else:
            no_resp_created = pd.DataFrame()

        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        if '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' in df_merged.columns:
            no_resp_completed = df_merged[no_resp_mask & completed_mask]
        else:
            no_resp_completed = pd.DataFrame()

        # –ü–æ–¥—Å—á–µ—Ç –º–∞–∫–µ—Ç–æ–≤ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        def sum_column(df, col):
            return df[col].sum() if col in df.columns else 0

        no_resp_created_makets = sum_column(no_resp_created, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫–µ—Ç–æ–≤')
        no_resp_created_variants = sum_column(no_resp_created, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        no_resp_completed_makets = sum_column(no_resp_completed, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫–µ—Ç–æ–≤')
        no_resp_completed_variants = sum_column(no_resp_completed, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')

        # === 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º ===
        logger.info("\n5. –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –û–¢–ß–ï–¢–ê –ü–û –î–ò–ó–ê–ô–ù–ï–†–ê–ú:")
        if not completed_design.empty and '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π' in completed_design.columns:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
            col_rename = {
                '–ö–æ–ª-–≤–æ –º–∞–∫–µ—Ç–æ–≤': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫–µ—Ç–æ–≤',
                '–ö–æ–ª-–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'
            }
            completed_design = completed_design.rename(columns=col_rename)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫–µ—Ç–æ–≤' not in completed_design.columns:
                completed_design['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫–µ—Ç–æ–≤'] = 0
            if '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤' not in completed_design.columns:
                completed_design['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'] = 0

            completed_design['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫–µ—Ç–æ–≤'] = completed_design['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫–µ—Ç–æ–≤'].fillna(0).astype(int)
            completed_design['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'] = completed_design['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'].fillna(0).astype(int)

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            agg_dict = {
                '–ó–∞–¥–∞—á–∏': ('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π', 'size'),
                '–ú–∞–∫–µ—Ç—ã': ('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫–µ—Ç–æ–≤', 'sum'),
                '–í–∞—Ä–∏–∞–Ω—Ç—ã': ('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤', 'sum')
            }
            
            if '–û—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç—ã' in completed_design.columns:
                agg_dict['–û—Ü–µ–Ω–∫–∞'] = ('–û—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç—ã', 'mean')

            report = completed_design.groupby('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π').agg(**agg_dict).reset_index()

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∑–∞–¥–∞—á–∏
            unknown_tasks = completed_design[completed_design['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'] == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']
            if not unknown_tasks.empty:
                unknown_row = {
                    '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    '–ó–∞–¥–∞—á–∏': len(unknown_tasks),
                    '–ú–∞–∫–µ—Ç—ã': unknown_tasks['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫–µ—Ç–æ–≤'].sum(),
                    '–í–∞—Ä–∏–∞–Ω—Ç—ã': unknown_tasks['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'].sum()
                }
                if '–û—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç—ã' in unknown_tasks.columns:
                    unknown_row['–û—Ü–µ–Ω–∫–∞'] = round(unknown_tasks['–û—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç—ã'].mean(), 2)
                
                report = pd.concat([report, pd.DataFrame([unknown_row])], ignore_index=True)

            logger.info("–û—Ç—á–µ—Ç –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:")
            logger.info(report.to_string())
        else:
            report = pd.DataFrame(columns=['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π', '–ó–∞–¥–∞—á–∏', '–ú–∞–∫–µ—Ç—ã', '–í–∞—Ä–∏–∞–Ω—Ç—ã'])
            logger.warning("–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        if not report.empty:
            total_row = {
                '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π': '–ò–¢–û–ì–û',
                '–ó–∞–¥–∞—á–∏': report['–ó–∞–¥–∞—á–∏'].sum(),
                '–ú–∞–∫–µ—Ç—ã': report['–ú–∞–∫–µ—Ç—ã'].sum(),
                '–í–∞—Ä–∏–∞–Ω—Ç—ã': report['–í–∞—Ä–∏–∞–Ω—Ç—ã'].sum()
            }
            if '–û—Ü–µ–Ω–∫–∞' in report.columns:
                total_row['–û—Ü–µ–Ω–∫–∞'] = round(report['–û—Ü–µ–Ω–∫–∞'].mean(), 2)
            
            report = pd.concat([report, pd.DataFrame([total_row])], ignore_index=True)

        # === 6. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ ===
        text_report = f"""–û–¢–ß–ï–¢ –ó–ê {month_name.upper()} {year} –ì–û–î–ê

–î–∏–∑–∞–π–Ω–µ—Ä—ã:
- –ü–æ—Å—Ç—É–ø–∏–ª–æ –∑–∞–¥–∞—á: {len(created_design)}
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {len(completed_design)}

–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏:
- –ü–æ—Å—Ç—É–ø–∏–ª–æ: {len(created_text)}
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(completed_text)}

–ó–∞–¥–∞—á–∏ –±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ (–ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ):
- –ó–∞–¥–∞—á: {len(no_resp_created)}
- –ú–∞–∫–µ—Ç–æ–≤: {int(no_resp_created_makets)}
- –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {int(no_resp_created_variants)}

–ó–∞–¥–∞—á–∏ –±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ):
- –ó–∞–¥–∞—á: {len(no_resp_completed)}
- –ú–∞–∫–µ—Ç–æ–≤: {int(no_resp_completed_makets)}
- –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {int(no_resp_completed_variants)}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–´–ü–û–õ–ù–ï–ù–ù–´–ú –ó–ê–î–ê–ß–ê–ú –î–ò–ó–ê–ô–ù–ï–†–û–í:
(—Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤ –æ—Ç—á–µ—Ç–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ)"""

        logger.info("\n=== –û–¢–ß–ï–¢ –£–°–ü–ï–®–ù–û –°–§–û–†–ú–ò–†–û–í–ê–ù ===")
        return report, text_report

    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê –ü–†–ò –§–û–†–ú–ò–†–û–í–ê–ù–ò–ò –û–¢–ß–ï–¢–ê: {str(e)}", exc_info=True)
        raise

# === –°–µ—Å—Å–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ===
sessions = {}

# === –ú–∞—Ä—à—Ä—É—Ç—ã Flask ===
@app.route('/kaiten-addon')
def serve_kaiten_addon():
    """–û—Ç–¥–∞–µ—Ç HTML-—Ñ–∞–π–ª –¥–ª—è Kaiten Addon"""
    return send_file('kaiten-addon.html')
@app.route('/')
def index():
    current_year = datetime.now().year
    return render_template_string(HTML_TEMPLATE, current_year=current_year)
@app.route('/test')
def test():
    return "Hello from Flask!"
@app.route('/generate_report', methods=['POST'])
def generate_report_route():
    try:
        if 'grid_file' not in request.files or 'archive_file' not in request.files:
            return jsonify({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞'})
        
        grid_file = request.files['grid_file']
        archive_file = request.files['archive_file']
        month = request.form.get('month')
        year = request.form.get('year')

        if not month or not year:
            return jsonify({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–µ—Å—è—Ü –∏ –≥–æ–¥'})

        if grid_file.filename == '' or archive_file.filename == '':
            return jsonify({'success': False, 'error': '–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã'})

        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        df_grid = pd.read_excel(grid_file)
        df_archive = pd.read_excel(archive_file)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report_df, text_report = generate_report(df_grid, df_archive, month, int(year))

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        session_id = str(uuid.uuid4())
        temp_dir = tempfile.mkdtemp()
        
        excel_path = os.path.join(temp_dir, 'report.xlsx')
        text_path = os.path.join(temp_dir, 'report.txt')
        merged_path = os.path.join(temp_dir, 'merged.xlsx')

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        report_df.to_excel(excel_path, index=False)
        
        with open(text_path, 'w', encoding='utf-8') as f:
            f.write(text_report)

        df_merged = merge_grid_to_archive(df_grid, df_archive)
        df_merged.to_excel(merged_path, index=False)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏
        sessions[session_id] = {
            'excel_path': excel_path,
            'text_path': text_path,
            'merged_path': merged_path,
            'temp_dir': temp_dir,
            'text_report': text_report
        }

        return jsonify({
            'success': True,
            'session_id': session_id,
            'text_report': text_report
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        return jsonify({'success': False, 'error': str(e)})

@app.route('/download/<file_type>/<session_id>')
def download_file(file_type, session_id):
    try:
        if session_id not in sessions:
            return "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404

        session_data = sessions[session_id]
        filename = request.args.get('filename', 'file')

        if file_type == 'excel':
            return send_file(session_data['excel_path'], as_attachment=True, download_name=filename)
        elif file_type == 'text':
            return send_file(session_data['text_path'], as_attachment=True, download_name=filename)
        elif file_type == 'merged':
            return send_file(session_data['merged_path'], as_attachment=True, download_name=filename)
        else:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞", 400

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞", 500

@app.route('/cleanup/<session_id>')
def cleanup(session_id):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        if session_id in sessions:
            session_data = sessions.pop(session_id)
            shutil.rmtree(session_data['temp_dir'])
            return jsonify({'success': True})
        return jsonify({'success': False, 'error': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        return jsonify({'success': False, 'error': str(e)})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
